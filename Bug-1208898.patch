From ed2c04c3e1b009da3d470b0f934526213a68b7d2 Mon Sep 17 00:00:00 2001
From: Ernesto Alfonso <erjoalgo@gmail.com>
Date: Mon, 28 Sep 2015 11:34:26 -0400
Subject: [PATCH] Bug 1208898 - missing sdk/io/file.open append mode fix. tests
 added

---
 lib/sdk/io/file.js | 63 ++++++++++++++++++++++++++++++++----------------------
 test/test-file.js  | 30 ++++++++++++++++++++++++++
 2 files changed, 67 insertions(+), 26 deletions(-)

diff --git a/lib/sdk/io/file.js b/lib/sdk/io/file.js
index 6e488a8..9dd338c 100644
--- a/lib/sdk/io/file.js
+++ b/lib/sdk/io/file.js
@@ -129,44 +129,55 @@ exports.list = function list(path) {
 };
 
 exports.open = function open(filename, mode) {
-  var file = MozFile(filename);
-  if (typeof(mode) !== "string")
+  const file = MozFile(filename);
+  if (typeof (mode) !== "string") {
     mode = "";
+  }
 
   // File opened for write only.
-  if (/w/.test(mode)) {
-    if (file.exists())
+  if (/[aw]/.test(mode)) {
+    const exists = file.exists();
+    if (exists) {
       ensureFile(file);
-    var stream = Cc['@mozilla.org/network/file-output-stream;1'].
-                 createInstance(Ci.nsIFileOutputStream);
-    var openFlags = OPEN_FLAGS.WRONLY |
-                    OPEN_FLAGS.CREATE_FILE |
-                    OPEN_FLAGS.TRUNCATE;
-    var permFlags = parseInt("0644", 8); // u+rw go+r
+    }
+    const stream = Cc['@mozilla.org/network/file-output-stream;1'].
+	  createInstance(Ci.nsIFileOutputStream);
+    let openFlags = OPEN_FLAGS.WRONLY;
+
+    if (exists && /a/.test(mode)) {
+      openFlags |= OPEN_FLAGS.APPEND;
+    }
+    else {
+      openFlags |= OPEN_FLAGS.TRUNCATE |
+        OPEN_FLAGS.CREATE_FILE;
+    }
+
+    const permFlags = parseInt('0644', 8); // u+rw go+r
     try {
       stream.init(file, openFlags, permFlags, 0);
     }
-    catch (err) {
+    catch ( err ) {
       throw friendlyError(err, filename);
     }
     return /b/.test(mode) ?
-           new byteStreams.ByteWriter(stream) :
-           new textStreams.TextWriter(stream);
+      new byteStreams.ByteWriter(stream) :
+      new textStreams.TextWriter(stream);
   }
-
-  // File opened for read only, the default.
-  ensureFile(file);
-  stream = Cc['@mozilla.org/network/file-input-stream;1'].
-           createInstance(Ci.nsIFileInputStream);
-  try {
-    stream.init(file, OPEN_FLAGS.RDONLY, 0, 0);
-  }
-  catch (err) {
-    throw friendlyError(err, filename);
+  else {
+    // File opened for read only, the default.
+    ensureFile(file);
+    const stream = Cc['@mozilla.org/network/file-input-stream;1'].
+	  createInstance(Ci.nsIFileInputStream);
+    try {
+      stream.init(file, OPEN_FLAGS.RDONLY, 0, 0);
+    }
+    catch ( err ) {
+      throw friendlyError(err, filename);
+    }
+    return /b/.test(mode) ?
+      new byteStreams.ByteReader(stream) :
+      new textStreams.TextReader(stream);
   }
-  return /b/.test(mode) ?
-         new byteStreams.ByteReader(stream) :
-         new textStreams.TextReader(stream);
 };
 
 exports.remove = function remove(path) {
diff --git a/test/test-file.js b/test/test-file.js
index 3c4a7d0..0eeed12 100644
--- a/test/test-file.js
+++ b/test/test-file.js
@@ -139,6 +139,36 @@ exports.testOpenNonexistentForWrite = function (assert) {
               "file.exists() should return false after file.remove()");
 };
 
+exports.testAppend = function(assert) {
+  const filename = file.join(profilePath, 'open.txt');
+  const stringA = "hola";
+  const stringB = "adiÃ³s";
+
+  const read = (filename) => {
+    const TextReader = file.open(filename, "r");
+    const text = TextReader.read();
+    TextReader.close();
+    return text;
+  };
+
+  let stream = file.open(filename, "w"); //create or truncate
+  stream.write(stringA);
+  stream.close();
+
+  stream = file.open(filename, "a"); //append
+  stream.write(stringB);
+  stream.close();
+
+  const expectedContents = stringA + stringB;
+  const actualContents = read(filename);
+  assert.equal(expectedContents, actualContents,
+    "should have appended to file instead of truncating");
+
+  file.remove(filename);
+  assert.ok(!file.exists(filename),
+    "file.exists() should return false after file.remove()");
+};
+
 exports.testOpenDirectory = function (assert) {
   let dir = dirPathInProfile;
   assert.throws(function() {
-- 
2.1.4

